########## 堆调整函数 ###########
'''
实现num[j]~num[n]的调整，使其满足小根堆的性质
'''
def heapadjust(num,j,n):

	##### j节点的左孩子 #####
	i=2*j

	##### j节点的值 #####
	temp=num[j]

	##### 从j节点开始调整 #####
	while i<=n:

		##### 判断j节点是否有右孩子以及比较左右孩子的大小 #####
		if (i+1)<=n and num[i]>num[i+1]:

			##### 如果左孩子>右孩子，则i=i+1，这样i的值是最小孩子的下标 #####
			i=i+1

		##### 比较j节点与最小孩子的大小 #####
		if num[i]>temp:

			##### 如果j节点小于最小孩子，不做任何处理 #####
			break

		##### 如果j节点大于最小孩子，交换两者，将最小值放在j节点 #####
		num[j]=num[i]

		##### j节点更新为最小孩子的节点i #####
		j=i

		##### 计算节点i的左节点，重复此过程 #####
		i=i*2

	##### j节点更新为原来j节点的值 #####
	num[j]=temp

########## 堆初始化函数 ###########
def buildheap(num,n):

	##### 最后一个非叶子节点 #####
	i=int(n/2)

	##### 依次向前遍历非叶子节点 #####
	for j in range(i,0,-1):

		##### 调整堆 #####
		heapadjust(num,j,n)

########## 堆排序函数 ###########
def heapsort(num,n):

	##### 初始化堆 #####
	buildheap(num,n)

	##### 排序 #####
	for i in range(n,0,-1):

		##### 交换：将第一个数，也就是从num[1]到num[i]中的最小的数，放到num[i]的位置 #####
		num[1],num[i]=num[i],num[1]

		##### 调整：对剩下的num[1]到num[i-1]，再次进行堆排序，选出最小的值，放到num[1]的位置 #####
		heapadjust(num,1,i-1)

########## main函数入口 ###########
if __name__ == '__main__':

	########## 列表 ###########
	num=[-1,5,2,6,0,3,9,1,7,4]
	n=len(num)-1

	########## print before sort ###########
	print(num)

	########## qsort ###########
	heapsort(num,n)

	########## print after sort ###########
	print(num)